jobs:
  BuildAndroidNatives:
    container:
      image: jmonkeyengine/buildenv-jme3:android
    name: Build natives for android
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Clone the repo
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
    - continue-on-error: true
      name: Validate the Gradle wrapper
      uses: gradle/actions/wrapper-validation@v3
    - continue-on-error: true
      name: Build
      run: './gradlew -PuseCommitHashAsVersionName=true --no-daemon -PbuildNativeProjects=true
        \

        :jme3-android-native:assemble

        '
    - continue-on-error: true
      name: Upload natives
      uses: actions/upload-artifact@master
      with:
        name: android-natives
        path: build/native
  BuildJMonkey:
    name: Build on ${{ matrix.osName }} jdk${{ matrix.jdk }}
    needs:
    - BuildAndroidNatives
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Clone the repo
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
    - continue-on-error: true
      name: Setup the java environment
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: ${{ matrix.jdk }}
    - continue-on-error: true
      name: Download natives for android
      uses: actions/download-artifact@master
      with:
        name: android-natives
        path: build/native
    - continue-on-error: true
      name: Validate the Gradle wrapper
      uses: gradle/actions/wrapper-validation@v3
    - continue-on-error: true
      name: Build Engine
      run: "# Build\n./gradlew -PuseCommitHashAsVersionName=true -PskipPrebuildLibraries=true\
        \ build\n\nif [ \"${{ matrix.deploy }}\" = \"true\" ];\nthen\n  # We are going\
        \ to need \"zip\"\n  sudo apt-get update\n  sudo apt-get install -y zip\n\n\
        \  # Create the zip release and the javadoc\n  ./gradlew -PuseCommitHashAsVersionName=true\
        \ -PskipPrebuildLibraries=true mergedJavadoc createZipDistribution\n\n  #\
        \ We prepare the release for deploy\n  mkdir -p ./dist/release/\n  mv build/distributions/*.zip\
        \ dist/release/\n\n  # Install maven artifacts to ./dist/maven and sign them\
        \ if possible\n  if [ \"${{ secrets.SIGNING_PASSWORD }}\" = \"\" ];\n  then\n\
        \    echo \"Configure the following secrets to enable signing:\"\n    echo\
        \ \"SIGNING_KEY, SIGNING_PASSWORD\"\n\n    ./gradlew publishMavenPublicationToDistRepository\
        \ \\\n    -PskipPrebuildLibraries=true -PuseCommitHashAsVersionName=true \\\
        \n    --console=plain --stacktrace\n  else\n    ./gradlew publishMavenPublicationToDistRepository\
        \ \\\n    -PsigningKey='${{ secrets.SIGNING_KEY }}' \\\n    -PsigningPassword='${{\
        \ secrets.SIGNING_PASSWORD }}' \\\n    -PskipPrebuildLibraries=true -PuseCommitHashAsVersionName=true\
        \ \\\n    --console=plain --stacktrace\n  fi\n\n  # Zip the natives into a\
        \ single archive (we are going to use this to deploy native snapshots)\n \
        \ echo \"Create native zip\"\n  cdir=\"$PWD\"\n  cd \"build/native\"\n  zip\
        \ -r \"$cdir/dist/jme3-natives.zip\" *\n  cd \"$cdir\"\n  echo \"Done\"\n\
        fi\n"
      shell: bash
    - continue-on-error: true
      if: matrix.deploy==true
      name: Upload merged natives
      uses: actions/upload-artifact@master
      with:
        name: natives
        path: dist/jme3-natives.zip
    - continue-on-error: true
      if: matrix.deploy==true
      name: Upload maven artifacts
      uses: actions/upload-artifact@master
      with:
        name: maven
        path: dist/maven
    - continue-on-error: true
      if: matrix.deploy==true
      name: Upload javadoc
      uses: actions/upload-artifact@master
      with:
        name: javadoc
        path: dist/javadoc
    - continue-on-error: true
      if: github.event_name == 'release' && matrix.deploy==true
      name: Upload release
      uses: actions/upload-artifact@master
      with:
        name: release
        path: dist/release
    strategy:
      fail-fast: false
      matrix:
        include:
        - deploy: true
          os: ubuntu-latest
          osName: linux
        - deploy: false
          os: windows-2019
          osName: windows
        - deploy: false
          os: macOS-latest
          osName: mac
        - deploy: false
          jdk: 11
        jdk:
        - 11
        - 17
        os:
        - ubuntu-latest
        - windows-2019
        - macOS-latest
  DeployJavaDoc:
    if: github.event_name == 'release'
    name: Deploy Javadoc
    needs:
    - BuildJMonkey
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Set ssh key
      run: 'mkdir -p ~/.ssh/

        echo "${{ secrets.JAVADOC_GHPAGES_DEPLOY_PRIVKEY }}" > $HOME/.ssh/deploy.key

        chmod 600 $HOME/.ssh/deploy.key

        '
    - continue-on-error: true
      name: Clone gh-pages
      run: 'branch="gh-pages"

        export GIT_SSH_COMMAND="ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no
        -i $HOME/.ssh/deploy.key"

        git clone --single-branch --branch "$branch" git@github.com:${{ secrets.JAVADOC_GHPAGES_REPO
        }} .

        '
    - continue-on-error: true
      name: Download javadoc
      uses: actions/download-artifact@master
      with:
        name: javadoc
        path: newdoc
    - continue-on-error: true
      name: Deploy to github pages
      run: "set -f\nIFS=$'\\n'\n\n# Get the tag for this release\nversion=\"`if [[\
        \ $GITHUB_REF == refs\\/tags* ]]; then echo ${GITHUB_REF//refs\\/tags\\//};\
        \ fi`\"\n\n# If there is no tag, then we do nothing.\nif [ \"$version\" !=\
        \ \"\" ];\nthen\n  echo \"Deploy as $version\"\n\n  # Remove any older version\
        \ of the javadoc for this tag\n  if [ -d \"$version\" ];then rm -Rf \"$version\"\
        ; fi\n\n  # Rename newdoc with the version name\n  mv newdoc \"$version\"\n\
        \n  # if there isn't an index.txt we create one (we need this to list the\
        \ versions)\n  if [ ! -f \"index.txt\" ]; then echo \"\" > index.txt ; fi\n\
        \  index=\"`cat index.txt`\"\n\n  # Check if this version is already in index.txt\n\
        \  addNew=true\n  for v in $index;\n  do\n    if [ \"$v\" = \"$version\" ];\n\
        \    then\n      echo \"$v\" \"$version\"\n      addNew=false\n      break\n\
        \    fi\n  done\n\n  # If not, we add it to the beginning\n  if [ \"$addNew\"\
        \ = \"true\" ];\n  then\n    echo -e \"$version\\n$index\" > index.txt\n \
        \   index=\"`cat index.txt`\"\n  fi\n\n  # Regenerate the pages\n  chmod +x\
        \ make.sh\n  ./make.sh\n\n  # Configure git to use the deploy key\n  export\
        \ GIT_SSH_COMMAND=\"ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no\
        \ -i $HOME/.ssh/deploy.key\"\n\n  # Commit the changes\n  git config --global\
        \ user.name \"Github Actions\"\n  git config --global user.email \"actions@users.noreply.github.com\"\
        \n\n  git add . || true\n  git commit -m \"$version\" || true\n\n  branch=\"\
        gh-pages\"\n  git push origin \"$branch\" --force || true\n\nfi\n"
  DeployJavaSnapshot:
    if: github.event_name == 'push' && github.ref_name == 'master'
    name: Deploy Java Snapshot
    needs:
    - BuildJMonkey
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Clone the repo
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
    - continue-on-error: true
      name: Setup the java environment
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: '17'
    - continue-on-error: true
      name: Download natives for android
      uses: actions/download-artifact@master
      with:
        name: android-natives
        path: build/native
    - continue-on-error: true
      name: Rebuild the maven artifacts and deploy them to the Sonatype repository
      run: "if [ \"${{ secrets.OSSRH_PASSWORD }}\" = \"\" ];\nthen\n  echo \"Configure\
        \ the following secrets to enable deployment to Sonatype:\"\n  echo \"OSSRH_PASSWORD,\
        \ OSSRH_USERNAME, SIGNING_KEY, SIGNING_PASSWORD\"\nelse\n  ./gradlew publishMavenPublicationToSNAPSHOTRepository\
        \ \\\n  -PossrhPassword=${{ secrets.OSSRH_PASSWORD }} \\\n  -PossrhUsername=${{\
        \ secrets.OSSRH_USERNAME }} \\\n  -PsigningKey='${{ secrets.SIGNING_KEY }}'\
        \ \\\n  -PsigningPassword='${{ secrets.SIGNING_PASSWORD }}' \\\n  -PuseCommitHashAsVersionName=true\
        \ \\\n  --console=plain --stacktrace\nfi\n"
  DeployNativeSnapshot:
    if: github.event_name == 'push'
    name: Deploy native snapshot
    needs:
    - BuildJMonkey
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Clone the repo
      run: "branch=\"${GITHUB_REF//refs\\/heads\\//}\"\nif [ \"$branch\" != \"\" ];\n\
        then\n  git clone --single-branch --branch \"$branch\" https://github.com/${GITHUB_REPOSITORY}.git\
        \ .\nfi\n"
    - continue-on-error: true
      name: Download merged natives
      uses: actions/download-artifact@master
      with:
        name: natives
        path: dist/
    - continue-on-error: true
      name: Deploy natives snapshot
      run: "source .github/actions/tools/minio.sh\nNATIVE_CHANGES=\"yes\"\nbranch=\"\
        ${GITHUB_REF//refs\\/heads\\//}\"\nif [ \"$branch\" != \"\" ];\nthen\n  if\
        \ [ -f \"natives-snapshot.properties\" ];\n  then\n    nativeSnapshot=`cat\
        \ \"natives-snapshot.properties\"`\n    nativeSnapshot=\"${nativeSnapshot#*=}\"\
        \n\n    # We deploy ONLY if GITHUB_SHA (the current commit hash) is newer\
        \ than $nativeSnapshot\n    if [ \"`git rev-list --count $nativeSnapshot..$GITHUB_SHA`\"\
        \ = \"0\" ];\n    then\n      NATIVE_CHANGES=\"\"\n    else\n      # We check\
        \ if the native code changed.\n      echo \"Detect changes\"\n      NATIVE_CHANGES=\"\
        $(git diff-tree --name-only \"$GITHUB_SHA\" \"$nativeSnapshot\"  --  jme3-android-native/)\"\
        \n    fi\n  fi\n\n  # We do nothing if there is no change\n  if [ \"$NATIVE_CHANGES\"\
        \ = \"\" ];\n  then\n    echo \"No changes, skip.\"\n  else\n    if [ \"${{\
        \ secrets.OBJECTS_KEY }}\" = \"\" ];\n    then\n      echo \"Configure the\
        \ OBJECTS_KEY secret to enable natives snapshot deployment to MinIO\"\n  \
        \  else\n      # Deploy natives snapshot to a MinIO instance using function\
        \ in minio.sh\n      minio_uploadFile dist/jme3-natives.zip \\\n        native-snapshots/$GITHUB_SHA/jme3-natives.zip\
        \ \\\n        https://objects.jmonkeyengine.org \\\n        jmonkeyengine\
        \ \\\n        ${{ secrets.OBJECTS_KEY }}\n\n      # We reference the snapshot\
        \ by writing its commit hash in  natives-snapshot.properties\n      echo \"\
        natives.snapshot=$GITHUB_SHA\" > natives-snapshot.properties\n\n      # We\
        \ commit the updated  natives-snapshot.properties\n      git config --global\
        \ user.name \"Github Actions\"\n      git config --global user.email \"actions@users.noreply.github.com\"\
        \n\n      git add natives-snapshot.properties\n\n      git commit -m \"[skip\
        \ ci] update natives snapshot\"\n\n      # Pull rebase from the remote repo,\
        \ just in case there was a push in the meantime\n      git pull -q --rebase\n\
        \n      # We need to calculate the header for git authentication\n      header=$(echo\
        \ -n \"ad-m:${{ secrets.GITHUB_TOKEN }}\" | base64)\n\n      # Push\n    \
        \  (git -c http.extraheader=\"AUTHORIZATION: basic $header\" push origin \"\
        $branch\" || true)\n\n    fi\n  fi\nfi\n"
  DeployRelease:
    if: github.event_name == 'release'
    name: Deploy Release
    needs:
    - BuildJMonkey
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Clone the repo
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
    - continue-on-error: true
      name: Setup the java environment
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: '17'
    - continue-on-error: true
      name: Download maven artifacts
      uses: actions/download-artifact@master
      with:
        name: maven
        path: dist/maven
    - continue-on-error: true
      name: Download release
      uses: actions/download-artifact@master
      with:
        name: release
        path: dist/release
    - continue-on-error: true
      name: Download natives for android
      uses: actions/download-artifact@master
      with:
        name: android-natives
        path: build/native
    - continue-on-error: true
      name: Rebuild the maven artifacts and deploy them to Sonatype OSSRH
      run: "if [ \"${{ secrets.OSSRH_PASSWORD }}\" = \"\" ];\nthen\n  echo \"Configure\
        \ the following secrets to enable deployment to Sonatype:\"\n  echo \"OSSRH_PASSWORD,\
        \ OSSRH_USERNAME, SIGNING_KEY, SIGNING_PASSWORD\"\nelse\n  ./gradlew publishMavenPublicationToOSSRHRepository\
        \ \\\n  -PossrhPassword=${{ secrets.OSSRH_PASSWORD }} \\\n  -PossrhUsername=${{\
        \ secrets.OSSRH_USERNAME }} \\\n  -PsigningKey='${{ secrets.SIGNING_KEY }}'\
        \ \\\n  -PsigningPassword='${{ secrets.SIGNING_PASSWORD }}' \\\n  -PuseCommitHashAsVersionName=true\
        \ \\\n  --console=plain --stacktrace\nfi\n"
    - continue-on-error: true
      name: Deploy to GitHub Releases
      run: '# We need to get the release id (yeah, it''s not the same as the tag)

        echo "${GITHUB_EVENT_PATH}"

        cat ${GITHUB_EVENT_PATH}

        releaseId=$(jq --raw-output ''.release.id'' ${GITHUB_EVENT_PATH})


        # Now that we have the id, we just upload the release zip from before

        echo "Upload to release $releaseId"

        filename="$(ls dist/release/*.zip)"

        url="https://uploads.github.com/repos/${GITHUB_REPOSITORY}/releases/$releaseId/assets?name=$(basename
        $filename)"

        echo "Upload to $url"

        curl -L \

        -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \

        -H "Content-Type: application/zip" \

        --data-binary @"$filename" \

        "$url"

        '
    - continue-on-error: true
      name: Deploy to github package registry
      run: 'source .github/actions/tools/uploadToMaven.sh

        registry="https://maven.pkg.github.com/$GITHUB_REPOSITORY"

        echo "Deploy to github package registry $registry"

        uploadAllToMaven dist/maven/ $registry "token" ${{ secrets.GITHUB_TOKEN }}

        '
name: Build jMonkeyEngine
on:
  repository_dispatch:
    types: trigger-ga___main.yml
